/*
* generated by Xtext
*/
grammar InternalCSS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.istic.m2miage.idm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.istic.m2miage.idm.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.istic.m2miage.idm.services.CSSGrammarAccess;

}

@parser::members {

 	private CSSGrammarAccess grammarAccess;
 	
    public InternalCSSParser(TokenStream input, CSSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Style";	
   	}
   	
   	@Override
   	protected CSSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStyle
entryRuleStyle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStyleRule()); }
	 iv_ruleStyle=ruleStyle 
	 { $current=$iv_ruleStyle.current; } 
	 EOF 
;

// Rule Style
ruleStyle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStyleAccess().getPollStylePollStyleParserRuleCall_0_0()); 
	    }
		lv_pollStyle_0_0=rulePollStyle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStyleRule());
	        }
       		set(
       			$current, 
       			"pollStyle",
        		lv_pollStyle_0_0, 
        		"PollStyle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStyleAccess().getSingleQuestionStyleSingleQuestionStyleParserRuleCall_1_0()); 
	    }
		lv_singleQuestionStyle_1_0=ruleSingleQuestionStyle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStyleRule());
	        }
       		set(
       			$current, 
       			"singleQuestionStyle",
        		lv_singleQuestionStyle_1_0, 
        		"SingleQuestionStyle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStyleAccess().getMultipleQuestionStyleMultipleQuestionStyleParserRuleCall_2_0()); 
	    }
		lv_multipleQuestionStyle_2_0=ruleMultipleQuestionStyle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStyleRule());
	        }
       		set(
       			$current, 
       			"multipleQuestionStyle",
        		lv_multipleQuestionStyle_2_0, 
        		"MultipleQuestionStyle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStyleAccess().getTextQuestionStyleTextQuestionStyleParserRuleCall_3_0()); 
	    }
		lv_textQuestionStyle_3_0=ruleTextQuestionStyle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStyleRule());
	        }
       		set(
       			$current, 
       			"textQuestionStyle",
        		lv_textQuestionStyle_3_0, 
        		"TextQuestionStyle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePollStyle
entryRulePollStyle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPollStyleRule()); }
	 iv_rulePollStyle=rulePollStyle 
	 { $current=$iv_rulePollStyle.current; } 
	 EOF 
;

// Rule PollStyle
rulePollStyle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PollStyle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPollStyleAccess().getPollStyleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPollStyleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPollStyleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPollStyleAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='bgColor' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPollStyleAccess().getBgColorKeyword_3());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPollStyleAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPollStyleAccess().getColorColorEnumEnumRuleCall_5_0()); 
	    }
		lv_color_5_0=ruleColorEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPollStyleRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_5_0, 
        		"ColorEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='borderType' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPollStyleAccess().getBorderTypeKeyword_6());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPollStyleAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPollStyleAccess().getBorderTypeBorderTypeEnumEnumRuleCall_8_0()); 
	    }
		lv_borderType_8_0=ruleBorderTypeEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPollStyleRule());
	        }
       		set(
       			$current, 
       			"borderType",
        		lv_borderType_8_0, 
        		"BorderTypeEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPollStyleAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleSingleQuestionStyle
entryRuleSingleQuestionStyle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleQuestionStyleRule()); }
	 iv_ruleSingleQuestionStyle=ruleSingleQuestionStyle 
	 { $current=$iv_ruleSingleQuestionStyle.current; } 
	 EOF 
;

// Rule SingleQuestionStyle
ruleSingleQuestionStyle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SingleQuestionStyle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSingleQuestionStyleAccess().getSingleQuestionStyleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSingleQuestionStyleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleQuestionStyleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleQuestionStyleAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='bgColor' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSingleQuestionStyleAccess().getBgColorKeyword_3());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSingleQuestionStyleAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleQuestionStyleAccess().getColorColorEnumEnumRuleCall_5_0()); 
	    }
		lv_color_5_0=ruleColorEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleQuestionStyleRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_5_0, 
        		"ColorEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='borderType' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSingleQuestionStyleAccess().getBorderTypeKeyword_6());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSingleQuestionStyleAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleQuestionStyleAccess().getBorderTypeBorderTypeEnumEnumRuleCall_8_0()); 
	    }
		lv_borderType_8_0=ruleBorderTypeEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleQuestionStyleRule());
	        }
       		set(
       			$current, 
       			"borderType",
        		lv_borderType_8_0, 
        		"BorderTypeEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSingleQuestionStyleAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleMultipleQuestionStyle
entryRuleMultipleQuestionStyle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleQuestionStyleRule()); }
	 iv_ruleMultipleQuestionStyle=ruleMultipleQuestionStyle 
	 { $current=$iv_ruleMultipleQuestionStyle.current; } 
	 EOF 
;

// Rule MultipleQuestionStyle
ruleMultipleQuestionStyle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MultipleQuestionStyle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultipleQuestionStyleAccess().getMultipleQuestionStyleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMultipleQuestionStyleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleQuestionStyleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultipleQuestionStyleAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='bgColor' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleQuestionStyleAccess().getBgColorKeyword_3());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultipleQuestionStyleAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleQuestionStyleAccess().getColorColorEnumEnumRuleCall_5_0()); 
	    }
		lv_color_5_0=ruleColorEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleQuestionStyleRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_5_0, 
        		"ColorEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='borderType' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleQuestionStyleAccess().getBorderTypeKeyword_6());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMultipleQuestionStyleAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleQuestionStyleAccess().getBorderTypeBorderTypeEnumEnumRuleCall_8_0()); 
	    }
		lv_borderType_8_0=ruleBorderTypeEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleQuestionStyleRule());
	        }
       		set(
       			$current, 
       			"borderType",
        		lv_borderType_8_0, 
        		"BorderTypeEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultipleQuestionStyleAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleTextQuestionStyle
entryRuleTextQuestionStyle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextQuestionStyleRule()); }
	 iv_ruleTextQuestionStyle=ruleTextQuestionStyle 
	 { $current=$iv_ruleTextQuestionStyle.current; } 
	 EOF 
;

// Rule TextQuestionStyle
ruleTextQuestionStyle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TextQuestionStyle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextQuestionStyleAccess().getTextQuestionStyleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTextQuestionStyleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextQuestionStyleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTextQuestionStyleAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='bgColor' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextQuestionStyleAccess().getBgColorKeyword_3());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTextQuestionStyleAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTextQuestionStyleAccess().getColorColorEnumEnumRuleCall_5_0()); 
	    }
		lv_color_5_0=ruleColorEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTextQuestionStyleRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_5_0, 
        		"ColorEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='borderType' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTextQuestionStyleAccess().getBorderTypeKeyword_6());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTextQuestionStyleAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTextQuestionStyleAccess().getBorderTypeBorderTypeEnumEnumRuleCall_8_0()); 
	    }
		lv_borderType_8_0=ruleBorderTypeEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTextQuestionStyleRule());
	        }
       		set(
       			$current, 
       			"borderType",
        		lv_borderType_8_0, 
        		"BorderTypeEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTextQuestionStyleAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Rule ColorEnum
ruleColorEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Azure' 
	{
        $current = grammarAccess.getColorEnumAccess().getAzureEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getColorEnumAccess().getAzureEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Cyan' 
	{
        $current = grammarAccess.getColorEnumAccess().getCyanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getColorEnumAccess().getCyanEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='LavenderBlush' 
	{
        $current = grammarAccess.getColorEnumAccess().getLavenderBlushEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getColorEnumAccess().getLavenderBlushEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='LightGreen' 
	{
        $current = grammarAccess.getColorEnumAccess().getLightGreenEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getColorEnumAccess().getLightGreenEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='PaleTurquoise' 
	{
        $current = grammarAccess.getColorEnumAccess().getPaleTurquoiseEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getColorEnumAccess().getPaleTurquoiseEnumLiteralDeclaration_4()); 
    }
));



// Rule BorderTypeEnum
ruleBorderTypeEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Box' 
	{
        $current = grammarAccess.getBorderTypeEnumAccess().getBOXEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBorderTypeEnumAccess().getBOXEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='None' 
	{
        $current = grammarAccess.getBorderTypeEnumAccess().getNONEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBorderTypeEnumAccess().getNONEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='RoundedBox' 
	{
        $current = grammarAccess.getBorderTypeEnumAccess().getROUNDEDBOXEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBorderTypeEnumAccess().getROUNDEDBOXEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Dotte' 
	{
        $current = grammarAccess.getBorderTypeEnumAccess().getDotteEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBorderTypeEnumAccess().getDotteEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


