/*
* generated by Xtext
*/
package fr.istic.m2miage.idm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CSSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPollStyleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPollStylePollStyleParserRuleCall_0_0 = (RuleCall)cPollStyleAssignment_0.eContents().get(0);
		private final Assignment cSingleQuestionStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSingleQuestionStyleSingleQuestionStyleParserRuleCall_1_0 = (RuleCall)cSingleQuestionStyleAssignment_1.eContents().get(0);
		private final Assignment cMultipleQuestionStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultipleQuestionStyleMultipleQuestionStyleParserRuleCall_2_0 = (RuleCall)cMultipleQuestionStyleAssignment_2.eContents().get(0);
		private final Assignment cTextQuestionStyleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextQuestionStyleTextQuestionStyleParserRuleCall_3_0 = (RuleCall)cTextQuestionStyleAssignment_3.eContents().get(0);
		
		//Style:
		//	pollStyle=PollStyle singleQuestionStyle=SingleQuestionStyle multipleQuestionStyle=MultipleQuestionStyle
		//	textQuestionStyle=TextQuestionStyle;
		public ParserRule getRule() { return rule; }

		//pollStyle=PollStyle singleQuestionStyle=SingleQuestionStyle multipleQuestionStyle=MultipleQuestionStyle
		//textQuestionStyle=TextQuestionStyle
		public Group getGroup() { return cGroup; }

		//pollStyle=PollStyle
		public Assignment getPollStyleAssignment_0() { return cPollStyleAssignment_0; }

		//PollStyle
		public RuleCall getPollStylePollStyleParserRuleCall_0_0() { return cPollStylePollStyleParserRuleCall_0_0; }

		//singleQuestionStyle=SingleQuestionStyle
		public Assignment getSingleQuestionStyleAssignment_1() { return cSingleQuestionStyleAssignment_1; }

		//SingleQuestionStyle
		public RuleCall getSingleQuestionStyleSingleQuestionStyleParserRuleCall_1_0() { return cSingleQuestionStyleSingleQuestionStyleParserRuleCall_1_0; }

		//multipleQuestionStyle=MultipleQuestionStyle
		public Assignment getMultipleQuestionStyleAssignment_2() { return cMultipleQuestionStyleAssignment_2; }

		//MultipleQuestionStyle
		public RuleCall getMultipleQuestionStyleMultipleQuestionStyleParserRuleCall_2_0() { return cMultipleQuestionStyleMultipleQuestionStyleParserRuleCall_2_0; }

		//textQuestionStyle=TextQuestionStyle
		public Assignment getTextQuestionStyleAssignment_3() { return cTextQuestionStyleAssignment_3; }

		//TextQuestionStyle
		public RuleCall getTextQuestionStyleTextQuestionStyleParserRuleCall_3_0() { return cTextQuestionStyleTextQuestionStyleParserRuleCall_3_0; }
	}

	public class PollStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PollStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPollStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBgColorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColorColorEnumEnumRuleCall_5_0 = (RuleCall)cColorAssignment_5.eContents().get(0);
		private final Keyword cBorderTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBorderTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBorderTypeBorderTypeEnumEnumRuleCall_8_0 = (RuleCall)cBorderTypeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//PollStyle:
		//	"PollStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
		public ParserRule getRule() { return rule; }

		//"PollStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}"
		public Group getGroup() { return cGroup; }

		//"PollStyle"
		public Keyword getPollStyleKeyword_0() { return cPollStyleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"bgColor"
		public Keyword getBgColorKeyword_3() { return cBgColorKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//color=ColorEnum
		public Assignment getColorAssignment_5() { return cColorAssignment_5; }

		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_5_0() { return cColorColorEnumEnumRuleCall_5_0; }

		//"borderType"
		public Keyword getBorderTypeKeyword_6() { return cBorderTypeKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//borderType=BorderTypeEnum
		public Assignment getBorderTypeAssignment_8() { return cBorderTypeAssignment_8; }

		//BorderTypeEnum
		public RuleCall getBorderTypeBorderTypeEnumEnumRuleCall_8_0() { return cBorderTypeBorderTypeEnumEnumRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class SingleQuestionStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleQuestionStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleQuestionStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBgColorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColorColorEnumEnumRuleCall_5_0 = (RuleCall)cColorAssignment_5.eContents().get(0);
		private final Keyword cBorderTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBorderTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBorderTypeBorderTypeEnumEnumRuleCall_8_0 = (RuleCall)cBorderTypeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SingleQuestionStyle:
		//	"SingleQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
		public ParserRule getRule() { return rule; }

		//"SingleQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}"
		public Group getGroup() { return cGroup; }

		//"SingleQuestionStyle"
		public Keyword getSingleQuestionStyleKeyword_0() { return cSingleQuestionStyleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"bgColor"
		public Keyword getBgColorKeyword_3() { return cBgColorKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//color=ColorEnum
		public Assignment getColorAssignment_5() { return cColorAssignment_5; }

		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_5_0() { return cColorColorEnumEnumRuleCall_5_0; }

		//"borderType"
		public Keyword getBorderTypeKeyword_6() { return cBorderTypeKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//borderType=BorderTypeEnum
		public Assignment getBorderTypeAssignment_8() { return cBorderTypeAssignment_8; }

		//BorderTypeEnum
		public RuleCall getBorderTypeBorderTypeEnumEnumRuleCall_8_0() { return cBorderTypeBorderTypeEnumEnumRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class MultipleQuestionStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleQuestionStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultipleQuestionStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBgColorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColorColorEnumEnumRuleCall_5_0 = (RuleCall)cColorAssignment_5.eContents().get(0);
		private final Keyword cBorderTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBorderTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBorderTypeBorderTypeEnumEnumRuleCall_8_0 = (RuleCall)cBorderTypeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//MultipleQuestionStyle:
		//	"MultipleQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
		public ParserRule getRule() { return rule; }

		//"MultipleQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}"
		public Group getGroup() { return cGroup; }

		//"MultipleQuestionStyle"
		public Keyword getMultipleQuestionStyleKeyword_0() { return cMultipleQuestionStyleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"bgColor"
		public Keyword getBgColorKeyword_3() { return cBgColorKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//color=ColorEnum
		public Assignment getColorAssignment_5() { return cColorAssignment_5; }

		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_5_0() { return cColorColorEnumEnumRuleCall_5_0; }

		//"borderType"
		public Keyword getBorderTypeKeyword_6() { return cBorderTypeKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//borderType=BorderTypeEnum
		public Assignment getBorderTypeAssignment_8() { return cBorderTypeAssignment_8; }

		//BorderTypeEnum
		public RuleCall getBorderTypeBorderTypeEnumEnumRuleCall_8_0() { return cBorderTypeBorderTypeEnumEnumRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TextQuestionStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextQuestionStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextQuestionStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBgColorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColorColorEnumEnumRuleCall_5_0 = (RuleCall)cColorAssignment_5.eContents().get(0);
		private final Keyword cBorderTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBorderTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBorderTypeBorderTypeEnumEnumRuleCall_8_0 = (RuleCall)cBorderTypeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TextQuestionStyle:
		//	"TextQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
		public ParserRule getRule() { return rule; }

		//"TextQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}"
		public Group getGroup() { return cGroup; }

		//"TextQuestionStyle"
		public Keyword getTextQuestionStyleKeyword_0() { return cTextQuestionStyleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"bgColor"
		public Keyword getBgColorKeyword_3() { return cBgColorKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//color=ColorEnum
		public Assignment getColorAssignment_5() { return cColorAssignment_5; }

		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_5_0() { return cColorColorEnumEnumRuleCall_5_0; }

		//"borderType"
		public Keyword getBorderTypeKeyword_6() { return cBorderTypeKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//borderType=BorderTypeEnum
		public Assignment getBorderTypeAssignment_8() { return cBorderTypeAssignment_8; }

		//BorderTypeEnum
		public RuleCall getBorderTypeBorderTypeEnumEnumRuleCall_8_0() { return cBorderTypeBorderTypeEnumEnumRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	public class ColorEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColorEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAzureEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAzureAzureKeyword_0_0 = (Keyword)cAzureEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCyanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCyanCyanKeyword_1_0 = (Keyword)cCyanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLavenderBlushEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLavenderBlushLavenderBlushKeyword_2_0 = (Keyword)cLavenderBlushEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLightGreenEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLightGreenLightGreenKeyword_3_0 = (Keyword)cLightGreenEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPaleTurquoiseEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPaleTurquoisePaleTurquoiseKeyword_4_0 = (Keyword)cPaleTurquoiseEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ColorEnum:
		//	Azure | Cyan | LavenderBlush | LightGreen | PaleTurquoise;
		public EnumRule getRule() { return rule; }

		//Azure | Cyan | LavenderBlush | LightGreen | PaleTurquoise
		public Alternatives getAlternatives() { return cAlternatives; }

		//Azure
		public EnumLiteralDeclaration getAzureEnumLiteralDeclaration_0() { return cAzureEnumLiteralDeclaration_0; }

		//"Azure"
		public Keyword getAzureAzureKeyword_0_0() { return cAzureAzureKeyword_0_0; }

		//Cyan
		public EnumLiteralDeclaration getCyanEnumLiteralDeclaration_1() { return cCyanEnumLiteralDeclaration_1; }

		//"Cyan"
		public Keyword getCyanCyanKeyword_1_0() { return cCyanCyanKeyword_1_0; }

		//LavenderBlush
		public EnumLiteralDeclaration getLavenderBlushEnumLiteralDeclaration_2() { return cLavenderBlushEnumLiteralDeclaration_2; }

		//"LavenderBlush"
		public Keyword getLavenderBlushLavenderBlushKeyword_2_0() { return cLavenderBlushLavenderBlushKeyword_2_0; }

		//LightGreen
		public EnumLiteralDeclaration getLightGreenEnumLiteralDeclaration_3() { return cLightGreenEnumLiteralDeclaration_3; }

		//"LightGreen"
		public Keyword getLightGreenLightGreenKeyword_3_0() { return cLightGreenLightGreenKeyword_3_0; }

		//PaleTurquoise
		public EnumLiteralDeclaration getPaleTurquoiseEnumLiteralDeclaration_4() { return cPaleTurquoiseEnumLiteralDeclaration_4; }

		//"PaleTurquoise"
		public Keyword getPaleTurquoisePaleTurquoiseKeyword_4_0() { return cPaleTurquoisePaleTurquoiseKeyword_4_0; }
	}

	public class BorderTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BorderTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOXBoxKeyword_0_0 = (Keyword)cBOXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONENoneKeyword_1_0 = (Keyword)cNONEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cROUNDEDBOXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cROUNDEDBOXRoundedBoxKeyword_2_0 = (Keyword)cROUNDEDBOXEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDotteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDotteDotteKeyword_3_0 = (Keyword)cDotteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BorderTypeEnum:
		//	BOX="Box" | NONE="None" | ROUNDEDBOX="RoundedBox" | Dotte;
		public EnumRule getRule() { return rule; }

		//BOX="Box" | NONE="None" | ROUNDEDBOX="RoundedBox" | Dotte
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOX="Box"
		public EnumLiteralDeclaration getBOXEnumLiteralDeclaration_0() { return cBOXEnumLiteralDeclaration_0; }

		//"Box"
		public Keyword getBOXBoxKeyword_0_0() { return cBOXBoxKeyword_0_0; }

		//NONE="None"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_1() { return cNONEEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNONENoneKeyword_1_0() { return cNONENoneKeyword_1_0; }

		//ROUNDEDBOX="RoundedBox"
		public EnumLiteralDeclaration getROUNDEDBOXEnumLiteralDeclaration_2() { return cROUNDEDBOXEnumLiteralDeclaration_2; }

		//"RoundedBox"
		public Keyword getROUNDEDBOXRoundedBoxKeyword_2_0() { return cROUNDEDBOXRoundedBoxKeyword_2_0; }

		//Dotte
		public EnumLiteralDeclaration getDotteEnumLiteralDeclaration_3() { return cDotteEnumLiteralDeclaration_3; }

		//"Dotte"
		public Keyword getDotteDotteKeyword_3_0() { return cDotteDotteKeyword_3_0; }
	}
	
	private final StyleElements pStyle;
	private final PollStyleElements pPollStyle;
	private final SingleQuestionStyleElements pSingleQuestionStyle;
	private final MultipleQuestionStyleElements pMultipleQuestionStyle;
	private final TextQuestionStyleElements pTextQuestionStyle;
	private final ColorEnumElements unknownRuleColorEnum;
	private final BorderTypeEnumElements unknownRuleBorderTypeEnum;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CSSGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStyle = new StyleElements();
		this.pPollStyle = new PollStyleElements();
		this.pSingleQuestionStyle = new SingleQuestionStyleElements();
		this.pMultipleQuestionStyle = new MultipleQuestionStyleElements();
		this.pTextQuestionStyle = new TextQuestionStyleElements();
		this.unknownRuleColorEnum = new ColorEnumElements();
		this.unknownRuleBorderTypeEnum = new BorderTypeEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.istic.m2miage.idm.CSS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Style:
	//	pollStyle=PollStyle singleQuestionStyle=SingleQuestionStyle multipleQuestionStyle=MultipleQuestionStyle
	//	textQuestionStyle=TextQuestionStyle;
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	//PollStyle:
	//	"PollStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
	public PollStyleElements getPollStyleAccess() {
		return pPollStyle;
	}
	
	public ParserRule getPollStyleRule() {
		return getPollStyleAccess().getRule();
	}

	//SingleQuestionStyle:
	//	"SingleQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
	public SingleQuestionStyleElements getSingleQuestionStyleAccess() {
		return pSingleQuestionStyle;
	}
	
	public ParserRule getSingleQuestionStyleRule() {
		return getSingleQuestionStyleAccess().getRule();
	}

	//MultipleQuestionStyle:
	//	"MultipleQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
	public MultipleQuestionStyleElements getMultipleQuestionStyleAccess() {
		return pMultipleQuestionStyle;
	}
	
	public ParserRule getMultipleQuestionStyleRule() {
		return getMultipleQuestionStyleAccess().getRule();
	}

	//TextQuestionStyle:
	//	"TextQuestionStyle" name=ID "{" "bgColor" ":" color=ColorEnum "borderType" ":" borderType=BorderTypeEnum "}";
	public TextQuestionStyleElements getTextQuestionStyleAccess() {
		return pTextQuestionStyle;
	}
	
	public ParserRule getTextQuestionStyleRule() {
		return getTextQuestionStyleAccess().getRule();
	}

	//enum ColorEnum:
	//	Azure | Cyan | LavenderBlush | LightGreen | PaleTurquoise;
	public ColorEnumElements getColorEnumAccess() {
		return unknownRuleColorEnum;
	}
	
	public EnumRule getColorEnumRule() {
		return getColorEnumAccess().getRule();
	}

	//enum BorderTypeEnum:
	//	BOX="Box" | NONE="None" | ROUNDEDBOX="RoundedBox" | Dotte;
	public BorderTypeEnumElements getBorderTypeEnumAccess() {
		return unknownRuleBorderTypeEnum;
	}
	
	public EnumRule getBorderTypeEnumRule() {
		return getBorderTypeEnumAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
